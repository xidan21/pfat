#!/usr/bin/env python

import commands
import sys
import subprocess
import re
import os
import time

from Tkinter import *
from tkFileDialog import *

class MyCode(object):
	def __init__(self):
		root = Tk()
		root.title('welcome to use Pfat!')
		screen_width = root.winfo_screenwidth()
		screen_height = root.winfo_screenheight() 
		
		x = (screen_width/2) - (855/2) 
		y = (screen_height/2) - (900/2)
		root.geometry('%dx%d+%d+%d' % (855, 700, x, y))
		
######################## title ############################

		Label(root,width=10,text='Pfat',fg='blue',font=("Helvetica", 56)).place(x=262,y=40)
		Label(root,width=50,text='Protein functional annotation tool',fg='blue',font=("Helvetica", 16)).place(x=220,y=130)

#########################load an entry####################      

		Label(root,text='Find motifs within your sequence of interest.',fg='green').place(x=281,y=190)		
		Label(root,text='Paste your protein sequence into the box below',fg='green').place(x=271,y=210)

		self.textfr(root)

#########################load run button##################

		button = Button(root,text='Search',fg="red",command=self.Run)
		button.bind('<Return>',self.Run)
		button.focus()

		button.place(x=385,y=460)

#########################upload image#####################     

		image2 = PhotoImage(file="../figure/slu.gif")
		panel_2 = Label(root, image=image2)      
		panel_2.image = image2
		panel_2.place(x=150,y=550)
      
		image3 = PhotoImage(file="../figure/cg.gif")
		panel_3 = Label(root, image=image3)      
		panel_3.image = image3
		panel_3.place(x=610,y=550)

######################load menu bar#######################      

		menubar = Menu(root)
		filemenu = Menu(menubar)      
		menubar.add_cascade(label='File', menu=filemenu)
		filemenu.add_command(label='open...', command=self.open_as)
      
		helpmenu = Menu(menubar)
		menubar.add_cascade(label="Help", menu=helpmenu)
		helpmenu.add_command(label="About...", command=self.create_a_child_window_for_readme)
		filemenu.add_command(label='Exit', command=root.quit)      
		root.config(menu=menubar)

	#	root.wm_attributes("-topmost", 1)

		root.mainloop()
      
####################################################################################################   

	def textfr(self,master):

		textfr = Frame(master)
		self.text = Text(textfr,height = 10,width = 50, borderwidth=2,relief = RIDGE)
		scroll = Scrollbar(textfr)


		self.text.configure(yscrollcommand = scroll.set)
		self.text.pack(side = LEFT)
		scroll.pack(side = RIGHT,fill = Y)

		textfr.place(x=244, y=240) 
   
	def create_a_child_window_for_readme(self):
        
		# create the root window
		root_3 = Tk()
		text = Text(root_3)
        
		# modify the window
	#	root_3.title("READ ME")
		root_3.title("Result")
		root_3.geometry("1000x1000")
        
		myTextWidget= Text(root_3) # set up a text widget as a root (window) child
        
	#	myFile= file("../README") # get a file handle
		myFile = file("../example_result/outfile")
		myText=myFile.read() # read the file to variable

		text.tag_configure("red", foreground = "#ff0000")

		text.highlight_pattern("QUERY_SEQ", "red")

		myFile.close() # close file handle
        
		myTextWidget.insert(0.0,myText) # insert the file's text into the text widget
		myTextWidget.pack(expand=1, fill=BOTH) # show the widget
        
		root_3.mainloop()
        
	def create_a_child_window_for_result(self):

		root_2 = Tk()

                root_2.title("RESULT")
                root_2.geometry("900x600")

                myTextWidget= Text(root_2) # set up a text widget as a root (window) child

                scrollbar_x = Scrollbar(root_2,orient=HORIZONTAL)		
                scrollbar_x.pack(side = BOTTOM, fill = X)

                scrollbar_y = Scrollbar(root_2,orient=VERTICAL)
                scrollbar_y.pack(side = RIGHT,fill = Y)

                myTextWidget.configure(xscrollcommand = scrollbar_x.set)
                myTextWidget.configure(yscrollcommand = scrollbar_y.set)

                myFile=open("../result/outfile",'r') # get a file handle
                myText= myFile.read() # read the file to variable
                myFile.close() # close file handle

                myTextWidget.insert(0.0,myText) # insert the file's text into the text widget

                myTextWidget.pack(side=TOP,expand=TRUE, fill=BOTH) # show the widget

                string = "QUERY_SEQ"
                idx = myTextWidget.search(string, '1.0', nocase=1, stopindex=END)

                lastidx = "%s+%dc" % (idx, len(string))

                myTextWidget.tag_add("here", idx, lastidx)

                myTextWidget.tag_config("here", background="yellow", foreground="red")

                scrollbar_x.config(command=myTextWidget.xview)
                scrollbar_y.config(command=myTextWidget.yview)

		self.create_a_child_window_for_description()

                root_2.mainloop()

        def create_a_child_window_for_description(self):

                root_2 = Tk()

                root_2.title("RESULT")
                root_2.geometry("900x600")

                myTextWidget= Text(root_2) # set up a text widget as a root (window) child

                scrollbar_x = Scrollbar(root_2,orient=HORIZONTAL)
                scrollbar_x.pack(side = BOTTOM, fill = X)

                scrollbar_y = Scrollbar(root_2,orient=VERTICAL)
                scrollbar_y.pack(side = RIGHT,fill = Y)

                myTextWidget.configure(xscrollcommand = scrollbar_x.set)
                myTextWidget.configure(yscrollcommand = scrollbar_y.set)

                myFile=open("../result/description.txt",'r') # get a file handle
                myText= myFile.read() # read the file to variable
                myFile.close() # close file handle

                myTextWidget.insert(0.0,myText) # insert the file's text into the text widget

                myTextWidget.pack(side=TOP,expand=TRUE, fill=BOTH) # show the widget


                scrollbar_x.config(command=myTextWidget.xview)
                scrollbar_y.config(command=myTextWidget.yview)


                root_2.mainloop()


	def create_a_child_window(self):
		root_local = Tk()
		text = Text(root_local)
        
		root_local.title(filename)
		root_local.geometry("900x900")
        
		myTextWidget= Text(root_local) # set up a text widget as a root (window) child
        
		myFile=file(filename) # get a file handle
		myText= myFile.read() # read the file to variable
		myFile.close() # close file handle

		myTextWidget.insert(0.0,myText) # insert the file's text into the text widget
      
		myTextWidget.pack(expand=1, fill=BOTH) # show the widget
		
		menubar_local = Menu(root_local)
		
		filemenu_local = Menu(menubar_local)      
		menubar_local.add_cascade(label="File", menu=filemenu_local)		
		filemenu_local.add_command(label="Save...", command=self.file_save)
		filemenu_local.add_command(label="Exit...", command=root_local.quit)
        
		helpmenu_local = Menu(menubar_local)		
		menubar_local.add_cascade(label="Help", menu=helpmenu_local)
		helpmenu_local.add_command(label="About...", command=self.create_a_child_window_for_readme)
	
		root_local.config(menu=menubar_local)
		
		root_local.mainloop()

        def open_as(self):
                fileName_2 = askopenfilename(filetypes=[("Text and Python files","*.fa *.txt *.py *.pyw"), 
                     ("HTML files","*.htm"), 
                     ("All files","*.*")])
                
                try:
                
                        self.create_a_child_window(fileName_2)
                
                except IOError:
                
                        from tkMessageBox import showwarning
                        showwarning("Open", "Cannot open the file.")    
                        raise Cancel
                 
        def file_save(self):

                fout = asksaveasfile(mode='w', defaultextension=".txt")
                text2save = str(self.text.get("0.0",'END'))
                fout.write(text2save)
                fout.close()
	
	def Run(self, event = None):

		os.system("rm ../source/* >> ../source/log.txt 2>&1")
		os.system("rm ../result/* >> ../source/log.txt 2>&1")
	
		self.sequence = self.text.get('1.0','end-1c')

		print
		print "##################################################################################"
		print "                           Welcome to using Pfat!"
		print "##################################################################################"
		print 
		print "your query sequence is listed as below: \n%s" %(self.sequence)
		print
	
		out = open("../source/seq.txt",'w')
#		out.write(">QUERY_SEQ")

		print >> out, self.sequence

		out.close()

		p = subprocess.Popen(["python pfam.py"], shell=True)

		p.wait()

                try:

                        self.create_a_child_window_for_result()

                except IOError as e:

                        print 'Oh dear.'



if __name__=='__main__':    

	myApp = MyCode()


